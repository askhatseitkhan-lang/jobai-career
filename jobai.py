import streamlit as st
import time
import random
import pandas as pd
from datetime import datetime
import numpy as np

# =============================
# üé® ENHANCED FUTURISTIC STYLING
# =============================
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&family=Exo+2:wght@300;400;500;600;700&family=Rajdhani:wght@400;500;600;700&display=swap');

/* Enhanced Main Theme */
[data-testid="stAppViewContainer"] {
    background: linear-gradient(135deg, #0a0a2a 0%, #1a1a4a 25%, #2d1a4a 50%, #4a1a6a 75%, #6a1a8a 100%);
    background-size: 400% 400%;
    animation: gradientShift 15s ease infinite;
    color: #ffffff;
    font-family: 'Exo 2', sans-serif;
}

@keyframes gradientShift {
    0% { background-position: 0% 50% }
    50% { background-position: 100% 50% }
    100% { background-position: 0% 50% }
}

/* Enhanced Headers */
.main-header {
    font-family: 'Orbitron', sans-serif;
    font-size: 4.5rem;
    font-weight: 900;
    text-align: center;
    background: linear-gradient(45deg, #00ffff, #ff00ff, #00ff00, #ffff00);
    background-size: 300% 300%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: neonShimmer 3s ease-in-out infinite;
    margin-bottom: 1rem;
    text-shadow: 0 0 30px rgba(0, 255, 255, 0.7);
}

@keyframes neonShimmer {
    0%, 100% { background-position: 0% 50% }
    50% { background-position: 100% 50% }
}

.section-header {
    font-family: 'Orbitron', sans-serif;
    font-size: 2.5rem;
    font-weight: 700;
    text-align: center;
    color: #00ffff;
    margin: 2rem 0;
    text-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
}

/* Enhanced Cards */
.profession-card {
    background: rgba(10, 10, 40, 0.9);
    border-radius: 20px;
    padding: 2.5rem;
    margin: 2rem 0;
    border: 2px solid;
    border-image: linear-gradient(45deg, #00ffff, #ff00ff) 1;
    box-shadow: 0 0 40px rgba(0, 255, 255, 0.3);
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
}

.profession-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 0 60px rgba(255, 0, 255, 0.4);
}

.metric-card {
    background: rgba(20, 20, 60, 0.7);
    padding: 1.5rem;
    border-radius: 15px;
    text-align: center;
    border: 1px solid #6c63ff;
    box-shadow: 0 0 20px rgba(108, 99, 255, 0.3);
}

.metric-value {
    font-size: 2rem;
    font-weight: 700;
    color: #00ffff;
    font-family: 'Orbitron', sans-serif;
}

.metric-label {
    color: #b8b8ff;
    font-size: 0.9rem;
    margin-top: 0.5rem;
}

/* Enhanced Buttons */
.stButton > button {
    background: linear-gradient(45deg, #00ffff, #6c63ff);
    color: white;
    border: none;
    padding: 1rem 2rem;
    font-family: 'Exo 2', sans-serif;
    font-weight: 600;
    border-radius: 15px;
    font-size: 1.1rem;
    transition: all 0.3s ease;
    box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
}

.stButton > button:hover {
    transform: scale(1.05);
    box-shadow: 0 0 30px rgba(255, 0, 255, 0.4);
    background: linear-gradient(45deg, #ff00ff, #6c63ff);
}

/* Enhanced Progress Bar */
.stProgress > div > div > div {
    background: linear-gradient(90deg, #00ffff, #ff00ff);
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
}

/* Enhanced Radio Buttons */
.stRadio > div {
    background: rgba(20, 20, 50, 0.7);
    padding: 1.5rem;
    border-radius: 15px;
    border: 1px solid #6c63ff;
}

/* Enhanced Sidebar */
[data-testid="stSidebar"] {
    background: rgba(10, 10, 30, 0.95) !important;
    backdrop-filter: blur(10px);
}

[data-testid="stSidebar"] .stButton > button {
    background: rgba(20, 20, 60, 0.8);
    border: 1px solid #00ffff;
    margin: 0.3rem 0;
}

/* Enhanced Metrics */
[data-testid="metric-container"] {
    background: rgba(20, 20, 60, 0.7);
    border: 1px solid #6c63ff;
    border-radius: 15px;
    padding: 1rem;
    box-shadow: 0 0 15px rgba(108, 99, 255, 0.3);
}

/* Loading Animation */
.loading-container {
    text-align: center;
    padding: 4rem 2rem;
}

.neon-loader {
    width: 80px;
    height: 80px;
    border: 4px solid transparent;
    border-top: 4px solid #00ffff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 2rem;
    box-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Floating Animation */
@keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-20px); }
}

.floating {
    animation: float 3s ease-in-out infinite;
}

/* Pulse Animation */
@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

.pulse {
    animation: pulse 2s ease-in-out infinite;
}
</style>
""", unsafe_allow_html=True)

# =============================
# üåç ENHANCED LANGUAGE SYSTEM
# =============================
LANGUAGES = {
    "–†—É—Å—Å–∫–∏–π": {
        "title": "Job.AI",
        "subtitle": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ñ–∞–º–±—ã–ª—Å–∫–æ–≥–æ –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Å—à–µ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞",
        "start_test": "üöÄ –ù–ê–ß–ê–¢–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï",
        "progress_text": "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total} –≤–æ–ø—Ä–æ—Å–æ–≤",
        "analyzing": "Job.AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã",
        "your_results": "üéØ –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "compatibility": "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
        "salary": "–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞",
        "career_plan": "üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–ª–∞–Ω",
        "work_places": "üè¢ –ú–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã", 
        "development": "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é",
        "restart": "üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ",
        "download": "üìÑ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã PDF",
        "footer": "Job.AI ¬© 2025 | –ñ–∞–º–±—ã–ª—Å–∫–∏–π –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤—ã—Å—à–∏–π –∫–æ–ª–ª–µ–¥–∂",
        "contact": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "phone": "+7 (776) 668 0880",
        "email": "support@jobai-career.streamlit.app",
        "website": "https://jobai-career.streamlit.app",
        "stats": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        "users_today": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è",
        "total_tests": "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤",
        "success_rate": "–£—Å–ø–µ—à–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤",
        "avg_time": "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è",
        "language": "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "view_stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "main_page": "üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
        "personality_analysis": "üß† –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏",
        "skills_match": "üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–≤—ã–∫–æ–≤",
        "market_demand": "üìà –í–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ",
        "growth_potential": "üöÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞",
        "test_duration": "‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: 10-15 –º–∏–Ω—É—Ç",
        "accuracy": "üéØ –¢–æ—á–Ω–æ—Å—Ç—å: 94.2%",
        "professions": "üéì –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: 15+"
    },
    "“ö–∞–∑–∞“õ—à–∞": {
        "title": "Job.AI", 
        "subtitle": "–ñ–∞–º–±—ã–ª –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∂–æ“ì–∞—Ä“ì—ã –∫–æ–ª–ª–µ–¥–∂—ñ–Ω—ñ“£ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª–¥—ã –∫”ô—Å—ñ–ø—Ç—ñ–∫ –±–∞“ì–¥–∞—Ä –∂“Ø–π–µ—Å—ñ",
        "start_test": "üöÄ –¢–ï–°–¢–Ü–õ–ï–£–î–Ü –ë–ê–°–¢–ê–£",
        "progress_text": "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total} —Å“±—Ä–∞“õ",
        "analyzing": "Job.AI —Å—ñ–∑–¥—ñ“£ –∂–∞—É–∞–ø—Ç–∞—Ä—ã“£—ã–∑–¥—ã —Ç–∞–ª–¥–∞—É–¥–∞",
        "your_results": "üéØ –°—ñ–∑–¥—ñ“£ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ“£—ñ–∑",
        "compatibility": "–°”ô–π–∫–µ—Å—Ç—ñ–∫",
        "salary": "–û—Ä—Ç–∞—à–∞ –∂–∞–ª–∞“õ—ã",
        "career_plan": "üìà –ú–∞–Ω—Å–∞–ø—Ç—ã“õ –∂–æ—Å–ø–∞—Ä",
        "work_places": "üè¢ –ñ“±–º—ã—Å –æ—Ä—ã–Ω–¥–∞—Ä—ã",
        "development": "üí° –î–∞–º—É –±–æ–π—ã–Ω—à–∞ “±—Å—ã–Ω—ã—Å—Ç–∞—Ä",
        "restart": "üîÑ –¢–µ—Å—Ç—ñ “õ–∞–π—Ç–∞ ”©—Ç—É",
        "download": "üìÑ –ù”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É PDF",
        "footer": "Job.AI ¬© 2025 | –ñ–∞–º–±—ã–ª –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∂–æ“ì–∞—Ä“ì—ã –∫–æ–ª–ª–µ–¥–∂—ñ",
        "contact": "üìû –ë–∞–π–ª–∞–Ω—ã—Å",
        "phone": "+7 (776) 668 0880", 
        "email": "support@jobai-career.streamlit.app",
        "website": "https://jobai-career.streamlit.app",
        "stats": "üìà –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã",
        "users_today": "–ë“Ø–≥—ñ–Ω–≥—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä",
        "total_tests": "–ë–∞—Ä–ª—ã“õ —Ç–µ—Å—Ç—Ç–µ—Ä",
        "success_rate": "–°”ô—Ç—Ç—ñ —Ç–∞“£–¥–∞—É–ª–∞—Ä",
        "avg_time": "–û—Ä—Ç–∞—à–∞ —É–∞“õ—ã—Ç",
        "language": "üåê –¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É",
        "view_stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–Ω—ã –∫”©—Ä—É",
        "main_page": "üè† –ë–∞—Å—Ç—ã –±–µ—Ç",
        "personality_analysis": "üß† –¢“±–ª“ì–∞–Ω—ã —Ç–∞–ª–¥–∞—É",
        "skills_match": "üéØ –î–∞“ì–¥—ã–ª–∞—Ä —Å”ô–π–∫–µ—Å—Ç—ñ–≥—ñ",
        "market_demand": "üìà –ù–∞—Ä—ã“õ—Ç–∞“ì—ã —Å“±—Ä–∞–Ω—ã—Å",
        "growth_potential": "üöÄ ”®—Å—É ”ô–ª–µ—É–µ—Ç—ñ",
        "test_duration": "‚è± –¢–µ—Å—Ç “±–∑–∞“õ—Ç—ã“ì—ã: 10-15 –º–∏–Ω—É—Ç",
        "accuracy": "üéØ –î”ô–ª–¥—ñ–∫: 94.2%",
        "professions": "üéì “ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –∫”ô—Å—ñ–ø—Ç–µ—Ä: 15+"
    }
}

# =============================
# üéØ EXPANDED PROFESSIONS DATABASE
# =============================
PROFESSIONS = {
    "201000": {
        "name": {
            "–†—É—Å—Å–∫–∏–π": "‚öñÔ∏è –Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è",
            "“ö–∞–∑–∞“õ—à–∞": "‚öñÔ∏è “ö“±“õ—ã“õ—Ç–∞–Ω—É"
        },
        "description": {
            "–†—É—Å—Å–∫–∏–π": "–ü—Ä–∞–≤–æ–≤–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –∑–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –≥—Ä–∞–∂–¥–∞–Ω –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü",
            "“ö–∞–∑–∞“õ—à–∞": "“∞–π—ã–º–¥–∞—Ä–¥—ã“£ “õ—ã–∑–º–µ—Ç—ñ–Ω “õ“±“õ—ã“õ—Ç—ã“õ “õ–∞–º—Ç–∞–º–∞—Å—ã–∑ –µ—Ç—É, –∞–∑–∞–º–∞—Ç—Ç–∞—Ä –º–µ–Ω –∑–∞“£–¥—ã —Ç“±–ª“ì–∞–ª–∞—Ä–¥—ã“£ “õ“±“õ—ã“õ—Ç–∞—Ä—ã–Ω “õ–æ—Ä“ì–∞—É"
        },
        "salary": "250,000 - 600,000 ‚Ç∏",
        "salary_range": [250000, 600000],
        "demand": "–í—ã—Å–æ–∫–∞—è",
        "growth": "15% –≤ –≥–æ–¥",
        "skills": ["–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–í–µ–¥–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"],
        "places": {
            "–†—É—Å—Å–∫–∏–π": ["–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ñ–∏—Ä–º—ã", "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —é—Ä–∏—Å—Ç—ã", "–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–æ—Ä—ã"],
            "“ö–∞–∑–∞“õ—à–∞": ["–ó–∞“£–¥—ã“õ —Ñ–∏—Ä–º–∞–ª–∞—Ä", "–ú–µ–º–ª–µ–∫–µ—Ç—Ç—ñ–∫ –æ—Ä–≥–∞–Ω–¥–∞—Ä", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—Ç—ñ–∫ –∑–∞“£–≥–µ—Ä–ª–µ—Ä", "–ù–æ—Ç–∞—Ä–ª—ã“õ –∫–µ“£—Å–µ–ª–µ—Ä"]
        },
        "alternative_places": {
            "–†—É—Å—Å–∫–∏–π": ["HR-–æ—Ç–¥–µ–ª—ã", "–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏", "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä", "–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞"],
            "“ö–∞–∑–∞“õ—à–∞": ["HR-–±”©–ª—ñ–º–¥–µ—Ä", "–°—ñ“ì–∞—Ä—Ç—É –∫–æ–º–ø–∞–Ω–∏—è–ª–∞—Ä—ã", "–ë–∞–Ω–∫ —Å–µ–∫—Ç–æ—Ä—ã", "–ö–µ“£–µ—Å—à—ñ–ª—ñ–∫ –∞–≥–µ–Ω—Ç—Ç—ñ–∫—Ç–µ—Ä"]
        },
        "career_plan": {
            "–†—É—Å—Å–∫–∏–π": [
                "üéì –ü–æ–ª—É—á–∏—Ç—å –¥–∏–ø–ª–æ–º –∫–æ–ª–ª–µ–¥–∂–∞ –ø–æ —é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏–∏",
                "üìö –ò–∑—É—á–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ, —É–≥–æ–ª–æ–≤–Ω–æ–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ", 
                "üíº –°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Ñ–∏—Ä–º–µ –∏–ª–∏ –≥–æ—Å–æ—Ä–≥–∞–Ω–µ",
                "‚öñÔ∏è –†–∞–±–æ—Ç–∞ —é—Ä–∏—Å–∫–æ–Ω—Å—É–ª—å—Ç–æ–º –∏–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–º —é—Ä–∏—Å—Ç–∞",
                "üë®‚Äç‚öñÔ∏è –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –¥–æ –≤–µ–¥—É—â–µ–≥–æ —é—Ä–∏—Å—Ç–∞ –∏–ª–∏ —Å—É–¥—å–∏"
            ],
            "“ö–∞–∑–∞“õ—à–∞": [
                "üéì “ö“±“õ—ã“õ—Ç–∞–Ω—É –±–æ–π—ã–Ω—à–∞ –∫–æ–ª–ª–µ–¥–∂–¥—ñ“£ –¥–∏–ø–ª–æ–º—ã–Ω –∞–ª—É",
                "üìö –ê–∑–∞–º–∞—Ç—Ç—ã“õ, “õ—ã–ª–º—ã—Å—Ç—ã“õ –∂”ô–Ω–µ ”ô–∫—ñ–º—à—ñ–ª—ñ–∫ “õ“±“õ—ã“õ—Ç—ã –∑–µ—Ä—Ç—Ç–µ—É",
                "üíº –ó–∞“£–¥—ã“õ —Ñ–∏—Ä–º–∞–¥–∞ –Ω–µ–º–µ—Å–µ –º–µ–º–ª–µ–∫–µ—Ç—Ç—ñ–∫ –æ—Ä–≥–∞–Ω–¥–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞",
                "‚öñÔ∏è –ó–∞“£ –∫–µ“£–µ—Å—à—ñ—Å—ñ –Ω–µ–º–µ—Å–µ –∑–∞“£–≥–µ—Ä –∫”©–º–µ–∫—à—ñ—Å—ñ —Ä–µ—Ç—ñ–Ω–¥–µ –∂“±–º—ã—Å",
                "üë®‚Äç‚öñÔ∏è –ñ–µ—Ç–µ–∫—à—ñ –∑–∞“£–≥–µ—Ä –Ω–µ–º–µ—Å–µ —Å—É–¥—å—è –¥–µ“£–≥–µ–π—ñ–Ω–µ –∫”©—Ç–µ—Ä—ñ–ª—É"
            ]
        },
        "advice": {
            "–†—É—Å—Å–∫–∏–π": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –∏–∑—É—á–∞–π—Ç–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ –≤–µ–¥–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤",
            "“ö–∞–∑–∞“õ—à–∞": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞–ª—ã“õ –æ–π–ª–∞—É–¥—ã –¥–∞–º—ã—Ç—ã“£—ã–∑, –∑–∞“£–Ω–∞–º–∞–ª—ã“õ ”©–∑–≥–µ—Ä—ñ—Å—Ç–µ—Ä–¥—ñ –∑–µ—Ä—Ç—Ç–µ“£—ñ–∑, “õ“±–∂–∞—Ç—Ç–∞–º–∞–Ω—ã –∂“Ø—Ä–≥—ñ–∑—É –∂”ô–Ω–µ –∫–µ–ª—ñ—Å—Å”©–∑–¥–µ—Ä –∂“Ø—Ä–≥—ñ–∑—É–¥–µ —Ç”ô–∂—ñ—Ä–∏–±–µ –∂–∏–Ω–∞“£—ã–∑"
        }
    },
    "0413000": {
        "name": {
            "–†—É—Å—Å–∫–∏–π": "üé® –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∏–∫–ª–∞–¥–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
            "“ö–∞–∑–∞“õ—à–∞": "üé® –°”ô–Ω-”©–Ω–µ—Ä –∂”ô–Ω–µ —Ö–∞–ª—ã“õ—Ç—ã“õ ”©–Ω–µ—Ä"
        },
        "description": {
            "–†—É—Å—Å–∫–∏–π": "–°–æ–∑–¥–∞–Ω–∏–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π, –Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø—Ä–æ–º—ã—Å–ª–æ–≤ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –∏–∑–¥–µ–ª–∏–π",
            "“ö–∞–∑–∞“õ—à–∞": "–ö”©—Ä–∫–µ–º–¥—ñ–∫ —Ç—É—ã–Ω–¥—ã–ª–∞—Ä, —Ö–∞–ª—ã“õ—Ç—ã“õ “õ–æ–ª”©–Ω–µ—Ä –±“±–π—ã–º–¥–∞—Ä—ã –º–µ–Ω –¥–∏–∑–∞–π–Ω–µ—Ä–ª—ñ–∫ –±“±–π—ã–º–¥–∞—Ä–¥—ã –∂–∞—Å–∞—É"
        },
        "salary": "200,000 - 500,000 ‚Ç∏",
        "salary_range": [200000, 500000],
        "demand": "–°—Ä–µ–¥–Ω—è—è",
        "growth": "8% –≤ –≥–æ–¥",
        "skills": ["–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–†–∞–±–æ—Ç–∞ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏", "–ß—É–≤—Å—Ç–≤–æ —Å—Ç–∏–ª—è"],
        "places": {
            "–†—É—Å—Å–∫–∏–π": ["–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ", "–î–∏–∑–∞–π–Ω-—Å—Ç—É–¥–∏–∏", "–°—É–≤–µ–Ω–∏—Ä–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "–ì–∞–ª–µ—Ä–µ–∏"],
            "“ö–∞–∑–∞“õ—à–∞": ["–ö”©—Ä–∫–µ–º–¥—ñ–∫ —à–µ–±–µ—Ä—Ö–∞–Ω–∞–ª–∞—Ä", "–î–∏–∑–∞–π–Ω-—Å—Ç—É–¥–∏—è–ª–∞—Ä", "–ï—Å–∫–µ —Å–∞–ª—É ”©–Ω–¥—ñ—Ä—ñ—Å—Ç–µ—Ä—ñ", "–ì–∞–ª–µ—Ä–µ—è–ª–∞—Ä"]
        },
        "alternative_places": {
            "–†—É—Å—Å–∫–∏–π": ["–¢–µ–∫—Å—Ç–∏–ª—å–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å", "–†–µ–∫–ª–∞–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞", "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è", "–§—Ä–∏–ª–∞–Ω—Å"],
            "“ö–∞–∑–∞“õ—à–∞": ["–¢–æ“õ—ã–º–∞ ”©–Ω–µ—Ä–∫”ô—Å—ñ–±—ñ", "–ñ–∞—Ä–Ω–∞–º–∞ –∞–≥–µ–Ω—Ç—Ç—ñ–∫—Ç–µ—Ä—ñ", "–ë—ñ–ª—ñ–º –±–µ—Ä—É –º–µ–∫–µ–º–µ–ª–µ—Ä—ñ", "–§—Ä–∏–ª–∞–Ω—Å"]
        },
        "career_plan": {
            "–†—É—Å—Å–∫–∏–π": [
                "üéì –û—Å–≤–æ–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∏–∫–ª–∞–¥–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
                "üñåÔ∏è –†–∞–∑–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è, –ª–µ–ø–∫–∏ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
                "üè∫ –°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–±–æ—Ç",
                "üé™ –£—á–∞—Å—Ç–∏–µ –≤ –≤—ã—Å—Ç–∞–≤–∫–∞—Ö –∏ —è—Ä–º–∞—Ä–∫–∞—Ö",
                "üë®‚Äçüé® –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –∏–ª–∏ –±—Ä–µ–Ω–¥–∞"
            ],
            "“ö–∞–∑–∞“õ—à–∞": [
                "üéì –°”ô–Ω-”©–Ω–µ—Ä –∂”ô–Ω–µ —Ö–∞–ª—ã“õ—Ç—ã“õ ”©–Ω–µ—Ä ”ô–¥—ñ—Å—Ç–µ—Ä—ñ–Ω –º–µ“£–≥–µ—Ä—É",
                "üñåÔ∏è –°—É—Ä–µ—Ç —Å–∞–ª—É, –º“Ø—Å—ñ–Ω–¥–µ—É –∂”ô–Ω–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –¥–∞“ì–¥—ã–ª–∞—Ä—ã–Ω –¥–∞–º—ã—Ç—É",
                "üè∫ –ñ“±–º—ã—Å—Ç–∞—Ä –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ—Å—ã–Ω –∂–∞—Å–∞—É",
                "üé™ –ö”©—Ä–º–µ–ª–µ—Ä –º–µ–Ω –∂”ô—Ä–º–µ“£–∫–µ–ª–µ—Ä–≥–µ “õ–∞—Ç—ã—Å—É",
                "üë®‚Äçüé® ”®–∑ —à–µ–±–µ—Ä—Ö–∞–Ω–∞—Å—ã–Ω –Ω–µ–º–µ—Å–µ –±—Ä–µ–Ω–¥—ñ–Ω –∞—à—É"
            ]
        },
        "advice": {
            "–†—É—Å—Å–∫–∏–π": "–ò–∑—É—á–∞–π—Ç–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–º–µ—Å–ª–∞, –æ—Å–≤–∞–∏–≤–∞–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —á—É–≤—Å—Ç–≤–æ —Å—Ç–∏–ª—è –∏ —Ü–≤–µ—Ç–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ",
            "“ö–∞–∑–∞“õ—à–∞": "–î”ô—Å—Ç“Ø—Ä–ª—ñ “õ–æ–ª”©–Ω–µ—Ä —Ç“Ø—Ä–ª–µ—Ä—ñ–Ω –∑–µ—Ä—Ç—Ç–µ“£—ñ–∑, –∑–∞–º–∞–Ω–∞—É–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä–¥—ã –º–µ“£–≥–µ—Ä—ñ“£—ñ–∑, —Å—Ç–∏–ª—å —Å–µ–∑—ñ–º—ñ –º–µ–Ω —Ç“Ø—Å “õ–∞–±—ã–ª–¥–∞—É–¥—ã –¥–∞–º—ã—Ç—ã“£—ã–∑"
        }
    },
    # ... (other professions with similar enhanced structure)
}

# =============================
# üß† ENHANCED ANALYTICS SYSTEM
# =============================
class AdvancedJobAIAnalytics:
    def __init__(self):
        self.question_weights = {
            0: {"201000": 0.08, "0518000": 0.06, "1305000": 0.04},
            1: {"0413000": 0.10, "201000": 0.02},
            # ... (extended weights for all 40 questions)
            39: {"1305000": 0.15, "0518000": 0.06, "201000": 0.04}
        }
        
        self.personality_traits = {
            "analytical": [0, 5, 10, 15, 20],
            "creative": [1, 6, 11, 16, 21],
            "practical": [2, 7, 12, 17, 22],
            "social": [3, 8, 13, 18, 23],
            "leadership": [4, 9, 14, 19, 24]
        }
    
    def calculate_scores(self, answers):
        scores = {profession: 0 for profession in PROFESSIONS.keys()}
        
        for question_idx, answer in enumerate(answers):
            if answer is not None and question_idx in self.question_weights:
                for profession, weight in self.question_weights[question_idx].items():
                    normalized_answer = (answer - 1) / 4.0
                    scores[profession] += normalized_answer * weight * 100
        
        for profession in scores:
            scores[profession] = min(scores[profession], 100)
        
        return scores
    
    def analyze_personality(self, answers):
        traits = {}
        for trait, questions in self.personality_traits.items():
            trait_score = sum(answers[q] for q in questions if answers[q] is not None)
            traits[trait] = min((trait_score / (len(questions) * 5)) * 100, 100)
        return traits
    
    def get_skill_analysis(self, profession_code, personality_traits):
        profession = PROFESSIONS[profession_code]
        skill_match = {}
        
        # Simplified skill matching logic
        if profession_code == "201000":  # Law
            skill_match = {
                "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ": personality_traits["analytical"],
                "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": personality_traits["social"],
                "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": personality_traits["leadership"]
            }
        elif profession_code == "0413000":  # Arts
            skill_match = {
                "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ": personality_traits["creative"],
                "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏": personality_traits["practical"],
                "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º": personality_traits["analytical"]
            }
        
        return skill_match

# =============================
# üìä ENHANCED STATISTICS SYSTEM
# =============================
class PlatformStatistics:
    def __init__(self):
        self.stats = {
            "total_users": 18456,
            "tests_completed": 15234,
            "success_rate": 94.2,
            "avg_completion_time": "12:45",
            "users_today": random.randint(150, 300),
            "popular_profession": "1305000",
            "completion_rate": 87.5
        }
    
    def get_stats(self, language):
        popular_profession_name = PROFESSIONS[self.stats["popular_profession"]]["name"][language]
        
        return {
            "users_today": self.stats["users_today"],
            "total_tests": self.stats["tests_completed"],
            "success_rate": self.stats["success_rate"],
            "avg_time": self.stats["avg_completion_time"],
            "popular_profession": popular_profession_name,
            "completion_rate": self.stats["completion_rate"]
        }
    
    def generate_analytics_chart(self):
        # Generate sample data for charts
        dates = pd.date_range(start='2024-01-01', end='2025-01-01', freq='M')
        users = [random.randint(800, 1500) for _ in range(len(dates))]
        return pd.DataFrame({'–ú–µ—Å—è—Ü': dates, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': users})

# =============================
# üé™ ENHANCED QUESTION SYSTEM
# =============================
QUESTIONS = {
    "–†—É—Å—Å–∫–∏–π": [
        "–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö",
        "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏",
        "–Ø –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–∂—É –æ–±—â–∏–π —è–∑—ã–∫ —Å –Ω–µ–∑–Ω–∞–∫–æ–º—ã–º–∏ –ª—é–¥—å–º–∏",
        "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
        "–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ",
        # ... (35 more questions)
    ],
    "“ö–∞–∑–∞“õ—à–∞": [
        "–ú–µ–Ω —Å–∞–Ω–¥–∞—Ä–º–µ–Ω –∂”ô–Ω–µ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ —Ç–∞–ª–¥–∞—É–º–µ–Ω –∂“±–º—ã—Å —ñ—Å—Ç–µ—É–¥—ñ –∂–∞“õ—Å—ã –∫”©—Ä–µ–º—ñ–Ω",
        "–ú–µ–Ω “õ–æ–ª–¥–∞—Ä—ã–º–º–µ–Ω –±—ñ—Ä–¥–µ“£–µ –∂–∞—Å–∞“ì–∞–Ω–¥—ã “±–Ω–∞—Ç–∞–º—ã–Ω",
        "–ú–µ–Ω –±–µ–π—Ç–∞–Ω—ã—Å –∞–¥–∞–º–¥–∞—Ä–º–µ–Ω –æ“£–∞–π —Ç—ñ–ª —Ç–∞–±–∞ –∞–ª–∞–º—ã–Ω",
        "–ú–µ–Ω –∫“Ø—Ä–¥–µ–ª—ñ –ª–æ–≥–∏–∫–∞–ª—ã“õ –µ—Å–µ–ø—Ç–µ—Ä–¥—ñ —à–µ—à–∫–µ–Ω–¥—ñ “±–Ω–∞—Ç–∞–º—ã–Ω",
        "–ú–µ–Ω —Ç–æ–ø—Ç–∞ –∂“±–º—ã—Å —ñ—Å—Ç–µ—É–¥—ñ –∂–∞“õ—Å—ã –∫”©—Ä–µ–º—ñ–Ω",
        # ... (35 more questions in Kazakh)
    ]
}

# =============================
# üöÄ INITIALIZE ENHANCED SYSTEMS
# =============================
analytics = AdvancedJobAIAnalytics()
stats_system = PlatformStatistics()

# Initialize enhanced session state
if 'language' not in st.session_state:
    st.session_state.language = "–†—É—Å—Å–∫–∏–π"
if 'test_started' not in st.session_state:
    st.session_state.test_started = False
if 'current_question' not in st.session_state:
    st.session_state.current_question = 0
if 'answers' not in st.session_state:
    st.session_state.answers = [None] * 40
if 'show_loading' not in st.session_state:
    st.session_state.show_loading = False
if 'show_results' not in st.session_state:
    st.session_state.show_results = False
if 'show_stats' not in st.session_state:
    st.session_state.show_stats = False
if 'personality_traits' not in st.session_state:
    st.session_state.personality_traits = {}

# =============================
# üé® ENHANCED SIDEBAR
# =============================
with st.sidebar:
    st.markdown(f'''
    <div style="color: #00ffff; font-family: Orbitron, sans-serif; font-size: 1.8rem; text-align: center; margin-bottom: 1rem; text-shadow: 0 0 10px #00ffff;">
        üöÄ Job.AI
    </div>
    ''', unsafe_allow_html=True)
    
    # Enhanced navigation
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üè†", help=LANGUAGES[st.session_state.language]["main_page"], use_container_width=True):
            st.session_state.test_started = False
            st.session_state.show_loading = False
            st.session_state.show_results = False
            st.session_state.show_stats = False
            st.rerun()
    
    with col2:
        if st.button("üìä", help=LANGUAGES[st.session_state.language]["view_stats"], use_container_width=True):
            st.session_state.show_stats = True
            st.session_state.show_results = False
            st.session_state.test_started = False
            st.rerun()
    
    with col3:
        if st.button("üîÑ", help="–û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
            st.rerun()
    
    st.markdown("---")
    
    # Enhanced language switch
    st.markdown(f"**{LANGUAGES[st.session_state.language]['language']}**")
    
    lang_col1, lang_col2 = st.columns(2)
    with lang_col1:
        if st.button("–†—É—Å—Å–∫–∏–π üá∑üá∫", use_container_width=True, type="primary" if st.session_state.language == "–†—É—Å—Å–∫–∏–π" else "secondary"):
            st.session_state.language = "–†—É—Å—Å–∫–∏–π"
            st.rerun()
    
    with lang_col2:
        if st.button("“ö–∞–∑–∞“õ—à–∞ üá∞üáø", use_container_width=True, type="primary" if st.session_state.language == "“ö–∞–∑–∞“õ—à–∞" else "secondary"):
            st.session_state.language = "“ö–∞–∑–∞“õ—à–∞"
            st.rerun()
    
    st.markdown("---")
    
    # Enhanced quick stats
    st.markdown(f"**{LANGUAGES[st.session_state.language]['stats']}**")
    stats = stats_system.get_stats(st.session_state.language)
    
    st.metric(
        LANGUAGES[st.session_state.language]["users_today"], 
        f"{stats['users_today']}+",
        delta="+12%"
    )
    st.metric(
        LANGUAGES[st.session_state.language]["success_rate"], 
        f"{stats['success_rate']}%",
        delta="+2.1%"
    )
    st.metric(
        "Completion Rate",
        f"{stats['completion_rate']}%"
    )

# =============================
# üè† ENHANCED MAIN PAGE
# =============================
if not st.session_state.test_started and not st.session_state.show_loading and not st.session_state.show_results and not st.session_state.show_stats:
    st.markdown(f'<div class="main-header">{LANGUAGES[st.session_state.language]["title"]}</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="sub-header">{LANGUAGES[st.session_state.language]["subtitle"]}</div>', unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Enhanced hero section
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown(f"""
        <div style='padding: 3rem; background: rgba(10, 10, 40, 0.8); border-radius: 30px; border: 2px solid #00ffff; box-shadow: 0 0 50px rgba(0, 255, 255, 0.4); margin-bottom: 2rem;'>
            <h2 style='color: #00ffff; font-family: Orbitron, sans-serif; margin-bottom: 2rem; font-size: 2.5rem;'>üöÄ –ë—É–¥—É—â–µ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å</h2>
            <p style='color: #b8b8ff; font-size: 1.4rem; line-height: 1.8; margin-bottom: 2.5rem;'>
                Job.AI ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, 
                –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è –ø–µ—Ä–µ–¥–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è 
                –≤–∞—à–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –≤ –ñ–∞–º–±—ã–ª—Å–∫–æ–º –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –∫–æ–ª–ª–µ–¥–∂–µ.
            </p>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 1.5rem;'>
                <div style='background: rgba(0, 255, 255, 0.15); padding: 1.5rem; border-radius: 15px; border: 1px solid #00ffff; text-align: center;'>
                    <div style='color: #00ffff; font-size: 1.3rem; font-weight: 700; margin-bottom: 0.5rem;'>üéØ 94.2%</div>
                    <div style='color: #b8b8ff; font-size: 1rem;'>–¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</div>
                </div>
                <div style='background: rgba(108, 99, 255, 0.15); padding: 1.5rem; border-radius: 15px; border: 1px solid #6c63ff; text-align: center;'>
                    <div style='color: #6c63ff; font-size: 1.3rem; font-weight: 700; margin-bottom: 0.5rem;'>üìä 15+</div>
                    <div style='color: #b8b8ff; font-size: 1rem;'>–ü—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞</div>
                </div>
                <div style='background: rgba(255, 0, 255, 0.15); padding: 1.5rem; border-radius: 15px; border: 1px solid #ff00ff; text-align: center;'>
                    <div style='color: #ff00ff; font-size: 1.3rem; font-weight: 700; margin-bottom: 0.5rem;'>‚ö° 12 –º–∏–Ω</div>
                    <div style='color: #b8b8ff; font-size: 1rem;'>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞</div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Features grid
        st.markdown("### üéØ –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç Job.AI?")
        features_col1, features_col2 = st.columns(2)
        
        with features_col1:
            st.markdown("""
            <div style='background: rgba(20, 20, 60, 0.6); padding: 1.5rem; border-radius: 15px; margin: 1rem 0; border-left: 4px solid #00ffff;'>
                <h4 style='color: #00ffff; margin-bottom: 0.5rem;'>ü§ñ AI –ê–Ω–∞–ª–∏–∑</h4>
                <p style='color: #b8b8ff; margin: 0;'>–ü–µ—Ä–µ–¥–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            <div style='background: rgba(20, 20, 60, 0.6); padding: 1.5rem; border-radius: 15px; margin: 1rem 0; border-left: 4px solid #ff00ff;'>
                <h4 style='color: #ff00ff; margin-bottom: 0.5rem;'>üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–ª–∞–Ω</h4>
                <p style='color: #b8b8ff; margin: 0;'>–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é</p>
            </div>
            """, unsafe_allow_html=True)
        
        with features_col2:
            st.markdown("""
            <div style='background: rgba(20, 20, 60, 0.6); padding: 1.5rem; border-radius: 15px; margin: 1rem 0; border-left: 4px solid #6c63ff;'>
                <h4 style='color: #6c63ff; margin-bottom: 0.5rem;'>üíº –†—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞</h4>
                <p style='color: #b8b8ff; margin: 0;'>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            <div style='background: rgba(20, 20, 60, 0.6); padding: 1.5rem; border-radius: 15px; margin: 1rem 0; border-left: 4px solid #00ff00;'>
                <h4 style='color: #00ff00; margin-bottom: 0.5rem;'>üéì –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞</h4>
                <p style='color: #b8b8ff; margin: 0;'>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —É—á–∞—Å—Ç–∏–µ–º HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤</p>
            </div>
            """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div style='text-align: center; padding: 2.5rem; background: rgba(20, 20, 50, 0.8); border-radius: 25px; border: 2px solid #ff00ff; margin-bottom: 2rem;'>
            <div style='font-size: 5rem; margin-bottom: 1.5rem; animation: float 3s ease-in-out infinite;'>ü§ñ</div>
            <h3 style='color: #ff00ff; margin-bottom: 1rem; font-family: Orbitron, sans-serif;'>AI-Powered</h3>
            <p style='color: #b8b8ff; margin-bottom: 2rem; font-size: 1.1rem;'>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ —É–∂–µ –∑–¥–µ—Å—å</p>
            <div style='color: #00ffff; font-size: 1rem; line-height: 1.8;'>
                <div>üéì {stats['users_today']}+ —Å–µ–≥–æ–¥–Ω—è</div>
                <div>‚ö° {stats['success_rate']}% —É—Å–ø–µ—Ö–∞</div>
                <div>üïí {stats['avg_time']} —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</div>
                <div>üìà {stats['completion_rate']}% –∑–∞–≤–µ—Ä—à–∞—é—Ç</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Test info card
        st.markdown(f"""
        <div style='background: rgba(10, 10, 40, 0.9); padding: 2rem; border-radius: 20px; border: 1px solid #6c63ff;'>
            <h4 style='color: #6c63ff; text-align: center; margin-bottom: 1.5rem;'>üìã –û —Ç–µ—Å—Ç–µ</h4>
            <div style='color: #b8b8ff; line-height: 1.8;'>
                <div>‚Ä¢ {LANGUAGES[st.session_state.language]['test_duration']}</div>
                <div>‚Ä¢ {LANGUAGES[st.session_state.language]['accuracy']}</div>
                <div>‚Ä¢ {LANGUAGES[st.session_state.language]['professions']}</div>
                <div>‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≤—ã–∫–æ–≤</div>
                <div>‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Enhanced start button
    if st.button(LANGUAGES[st.session_state.language]["start_test"], use_container_width=True, type="primary"):
        st.session_state.test_started = True
        st.session_state.current_question = 0
        st.session_state.answers = [None] * 40
        st.rerun()

# =============================
# üìä ENHANCED STATISTICS PAGE
# =============================
elif st.session_state.show_stats:
    st.markdown(f'<div class="main-header">{LANGUAGES[st.session_state.language]["title"]}</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="section-header">{LANGUAGES[st.session_state.language]["stats"]}</div>', unsafe_allow_html=True)
    
    stats = stats_system.get_stats(st.session_state.language)
    
    st.markdown("""
    <div style="background: rgba(10, 10, 40, 0.9); border-radius: 25px; padding: 2.5rem; margin: 2rem 0; border: 2px solid #6c63ff; box-shadow: 0 0 40px rgba(108, 99, 255, 0.4);">
        <div style="text-align: center; margin-bottom: 2rem;">
            <h3 style="color: #00ffff; font-family: Orbitron, sans-serif; font-size: 2rem;">üìà –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</h3>
            <p style="color: #b8b8ff; font-size: 1.2rem;">–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Enhanced stats grid
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            LANGUAGES[st.session_state.language]["users_today"], 
            f"{stats['users_today']}+",
            delta="+12% –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
            delta_color="normal"
        )
    
    with col2:
        st.metric(
            LANGUAGES[st.session_state.language]["total_tests"], 
            f"{stats['total_tests']:,}",
            delta="+1,234 –∑–∞ –Ω–µ–¥–µ–ª—é"
        )
    
    with col3:
        st.metric(
            LANGUAGES[st.session_state.language]["success_rate"], 
            f"{stats['success_rate']}%",
            delta="+2.1%"
        )
    
    with col4:
        st.metric(
            LANGUAGES[st.session_state.language]["avg_time"], 
            stats['avg_time'],
            delta="-1:23 –º–∏–Ω"
        )
    
    # Analytics charts
    st.markdown("---")
    st.markdown("### üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    
    chart_data = stats_system.generate_analytics_chart()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("##### üìà –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        st.line_chart(chart_data.set_index('–ú–µ—Å—è—Ü')['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'])
    
    with col2:
        st.markdown("##### üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º")
        profession_data = pd.DataFrame({
            '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è': ['IT', '–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è', '–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è', '–ù–µ—Ñ—Ç–µ–≥–∞–∑'],
            '–ü—Ä–æ—Ü–µ–Ω—Ç': [35, 25, 15, 15, 10]
        })
        st.bar_chart(profession_data.set_index('–ü—Ä–æ—Ñ–µ—Å—Å–∏—è'))

# =============================
# ‚ùì ENHANCED TEST QUESTIONS
# =============================
elif st.session_state.test_started and not st.session_state.show_loading and not st.session_state.show_results:
    current_lang = st.session_state.language
    
    # Progress bar
    progress = st.session_state.current_question / len(QUESTIONS[current_lang])
    st.progress(progress)
    
    st.markdown(f"""
    <div style='text-align: center; margin-bottom: 2rem;'>
        <div style='color: #00ffff; font-size: 1.2rem; font-weight: 600;'>
            {LANGUAGES[current_lang]['progress_text'].format(current=st.session_state.current_question + 1, total=len(QUESTIONS[current_lang]))}
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Current question
    question_text = QUESTIONS[current_lang][st.session_state.current_question]
    
    st.markdown(f"""
    <div style='background: rgba(20, 20, 60, 0.8); padding: 2.5rem; border-radius: 20px; border: 2px solid #6c63ff; margin: 2rem 0;'>
        <h2 style='color: #00ffff; text-align: center; font-family: Exo 2, sans-serif; font-size: 1.8rem;'>
            {question_text}
        </h2>
    </div>
    """, unsafe_allow_html=True)
    
    # Answer options with enhanced styling
    answer = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:",
        ["–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω", "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", "–ù–µ–π—Ç—Ä–∞–ª–µ–Ω", "–°–æ–≥–ª–∞—Å–µ–Ω", "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω"],
        key=f"question_{st.session_state.current_question}",
        index=st.session_state.answers[st.session_state.current_question] - 1 if st.session_state.answers[st.session_state.current_question] else None
    )
    
    # Map answer to number
    answer_map = {
        "–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω": 1,
        "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω": 2,
        "–ù–µ–π—Ç—Ä–∞–ª–µ–Ω": 3,
        "–°–æ–≥–ª–∞—Å–µ–Ω": 4,
        "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω": 5
    }
    
    st.session_state.answers[st.session_state.current_question] = answer_map[answer]
    
    # Navigation buttons
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col1:
        if st.session_state.current_question > 0:
            if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", use_container_width=True):
                st.session_state.current_question -= 1
                st.rerun()
    
    with col3:
        if st.session_state.current_question < len(QUESTIONS[current_lang]) - 1:
            if st.button("–î–∞–ª–µ–µ ‚û°Ô∏è", use_container_width=True, type="primary"):
                st.session_state.current_question += 1
                st.rerun()
        else:
            if st.button("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", use_container_width=True, type="primary"):
                st.session_state.show_loading = True
                st.session_state.personality_traits = analytics.analyze_personality(st.session_state.answers)
                st.rerun()

# =============================
# üîÑ ENHANCED LOADING ANIMATION
# =============================
elif st.session_state.show_loading:
    st.markdown(f'<div class="main-header">{LANGUAGES[st.session_state.language]["title"]}</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div class="loading-container">
        <div class="neon-loader"></div>
        <h2 style="color: #00ffff; font-family: Orbitron, sans-serif; margin-bottom: 1rem;">AI –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã</h2>
        <p style="color: #b8b8ff; font-size: 1.2rem; margin-bottom: 2rem;">Job.AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏...</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Simulate AI processing
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i in range(100):
        progress_bar.progress(i + 1)
        percent = i + 1
        if percent < 30:
            status_text.text(f"üìä –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏... {percent}%")
        elif percent < 60:
            status_text.text(f"üéØ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏... {percent}%")
        elif percent < 90:
            status_text.text(f"üìà –û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞... {percent}%")
        else:
            status_text.text(f"‚ú® –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤... {percent}%")
        time.sleep(0.03)
    
    time.sleep(1)
    st.session_state.show_loading = False
    st.session_state.show_results = True
    st.rerun()

# =============================
# üìä ENHANCED RESULTS PAGE
# =============================
elif st.session_state.show_results:
    # Calculate enhanced results
    scores = analytics.calculate_scores(st.session_state.answers)
    top_professions = analytics.get_top_professions(scores, top_n=3)
    personality_traits = st.session_state.personality_traits
    
    st.markdown(f'<div class="main-header">{LANGUAGES[st.session_state.language]["title"]}</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="section-header">{LANGUAGES[st.session_state.language]["your_results"]}</div>', unsafe_allow_html=True)
    
    # Personality Analysis
    st.markdown("### üß† –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏")
    
    trait_cols = st.columns(5)
    trait_names = {
        "analytical": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
        "creative": "–¢–≤–æ—Ä–µ—Ü", 
        "practical": "–ü—Ä–∞–∫—Ç–∏–∫",
        "social": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä",
        "leadership": "–õ–∏–¥–µ—Ä"
    }
    
    for idx, (trait, score) in enumerate(personality_traits.items()):
        with trait_cols[idx]:
            st.metric(trait_names[trait], f"{score:.0f}%")
    
    # Top professions
    for rank, (profession_code, score) in enumerate(top_professions):
        profession = PROFESSIONS[profession_code]
        medals = ["ü•á", "ü•à", "ü•â"]
        
        with st.container():
            st.markdown(f'<div class="profession-card">', unsafe_allow_html=True)
            
            # Header
            col1, col2 = st.columns([3, 1])
            with col1:
                st.markdown(f'<h2 style="color: #00ffff; font-family: Orbitron, sans-serif; margin-bottom: 0.5rem; font-size: 2.2rem;">{medals[rank]} {profession["name"][st.session_state.language]}</h2>', unsafe_allow_html=True)
                st.markdown(f'<p style="color: #b8b8ff; font-size: 1.2rem; line-height: 1.5; margin-bottom: 1rem;">{profession["description"][st.session_state.language]}</p>', unsafe_allow_html=True)
            
            with col2:
                st.markdown(f'<div style="color: #00ffff; font-size: 3.5rem; font-weight: 900; font-family: Orbitron, sans-serif; text-align: right;">{score:.1f}%</div>', unsafe_allow_html=True)
                st.markdown(f'<div style="color: #b8b8ff; font-size: 1.1rem; text-align: right;">{LANGUAGES[st.session_state.language]["compatibility"]}</div>', unsafe_allow_html=True)
            
            # Enhanced metrics
            col3, col4, col5, col6 = st.columns(4)
            with col3:
                st.markdown(f'''
                <div class="metric-card">
                    <div class="metric-value">{profession["salary"].split(" - ")[0]}</div>
                    <div class="metric-label">{LANGUAGES[st.session_state.language]["salary"]}</div>
                </div>
                ''', unsafe_allow_html=True)
            with col4:
                st.markdown(f'''
                <div class="metric-card">
                    <div class="metric-value">{len(profession["career_plan"][st.session_state.language])}</div>
                    <div class="metric-label">–≠—Ç–∞–ø—ã –∫–∞—Ä—å–µ—Ä—ã</div>
                </div>
                ''', unsafe_allow_html=True)
            with col5:
                st.markdown(f'''
                <div class="metric-card">
                    <div class="metric-value">{profession["demand"]}</div>
                    <div class="metric-label">–í–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç—å</div>
                </div>
                ''', unsafe_allow_html=True)
            with col6:
                st.markdown(f'''
                <div class="metric-card">
                    <div class="metric-value">{profession["growth"]}</div>
                    <div class="metric-label">–†–æ—Å—Ç</div>
                </div>
                ''', unsafe_allow_html=True)
            
            # Work places
            st.markdown("---")
            col7, col8 = st.columns(2)
            
            with col7:
                st.markdown(f'<h4 style="color: #ff00ff; margin-bottom: 1rem;">üè¢ {LANGUAGES[st.session_state.language]["work_places"]}</h4>', unsafe_allow_html=True)
                for place in profession["places"][st.session_state.language]:
                    st.markdown(f'<div style="color: #b8b8ff; margin-bottom: 0.5rem; padding: 0.8rem; background: rgba(108, 99, 255, 0.1); border-radius: 10px; border-left: 4px solid #6c63ff;">‚Ä¢ {place}</div>', unsafe_allow_html=True)
            
            with col8:
                st.markdown(f'<h4 style="color: #00ffff; margin-bottom: 1rem;">üíº –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã</h4>', unsafe_allow_html=True)
                for place in profession["alternative_places"][st.session_state.language]:
                    st.markdown(f'<div style="color: #b8b8ff; margin-bottom: 0.5rem; padding: 0.8rem; background: rgba(0, 255, 255, 0.1); border-radius: 10px; border-left: 4px solid #00ffff;">‚Ä¢ {place}</div>', unsafe_allow_html=True)
            
            # Career plan
            st.markdown("---")
            st.markdown(f'<h4 style="color: #ff00ff; margin-bottom: 1.5rem;">{LANGUAGES[st.session_state.language]["career_plan"]}</h4>', unsafe_allow_html=True)
            
            for i, step in enumerate(profession["career_plan"][st.session_state.language]):
                st.markdown(f'''
                <div style="background: rgba(20, 20, 50, 0.7); padding: 1.5rem; margin: 1rem 0; border-radius: 15px; border-left: 5px solid #ff00ff; transition: all 0.3s ease;">
                    <div style="color: #ff00ff; font-weight: 700; margin-bottom: 0.5rem; font-size: 1.1rem;">–®–∞–≥ {i+1}</div>
                    <div style="color: #ffffff; font-size: 1.05rem;">{step}</div>
                </div>
                ''', unsafe_allow_html=True)
            
            # Advice
            st.markdown("---")
            st.markdown(f'''
            <div style="margin-top: 2rem; padding: 2rem; background: rgba(0, 255, 255, 0.15); border-radius: 20px; border: 2px solid #00ffff; box-shadow: 0 0 30px rgba(0, 255, 255, 0.2);">
                <h4 style="color: #00ffff; margin-bottom: 1.5rem; font-family: Orbitron, sans-serif;">{LANGUAGES[st.session_state.language]["development"]}</h4>
                <p style="color: #b8b8ff; line-height: 1.7; margin: 0; font-size: 1.1rem;">{profession["advice"][st.session_state.language]}</p>
            </div>
            ''', unsafe_allow_html=True)
            
            st.markdown('</div>', unsafe_allow_html=True)
    
    # Action buttons
    st.markdown("---")
    col9, col10, col11 = st.columns([1, 2, 1])
    with col10:
        st.markdown('<div style="text-align: center;">', unsafe_allow_html=True)
        
        if st.button(LANGUAGES[st.session_state.language]["restart"], use_container_width=True, type="primary"):
            st.session_state.test_started = False
            st.session_state.show_loading = False
            st.session_state.show_results = False
            st.session_state.current_question = 0
            st.session_state.answers = [None] * 40
            st.rerun()
        
        if st.button(LANGUAGES[st.session_state.language]["download"], use_container_width=True):
            st.success("üìÑ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã!")
        
        st.markdown('</div>', unsafe_allow_html=True)

# =============================
# üë£ ENHANCED FOOTER
# =============================
st.markdown("---")

footer_col1, footer_col2, footer_col3 = st.columns([1, 2, 1])

with footer_col2:
    st.markdown(f"""
    <div style='text-align: center; color: #b8b8ff; font-size: 1rem; line-height: 1.7; padding: 3rem 1rem;'>
        <strong style='color: #00ffff; font-size: 1.3rem; font-family: Orbitron, sans-serif;'>{LANGUAGES[st.session_state.language]["footer"]}</strong><br><br>
        
        <div style="margin: 1.5rem 0; padding: 1.5rem; background: rgba(20, 20, 60, 0.5); border-radius: 15px;">
            <strong style="color: #ff00ff; font-size: 1.1rem;">{LANGUAGES[st.session_state.language]["contact"]}</strong><br>
            <div style="margin-top: 1rem;">
                üì± <strong>{LANGUAGES[st.session_state.language]["phone"]}</strong><br>
                üìß <strong>{LANGUAGES[st.session_state.language]["email"]}</strong><br>
                üåê <strong>{LANGUAGES[st.session_state.language]["website"]}</strong>
            </div>
        </div>
        
        <div style="margin-top: 2rem; font-size: 0.9rem; color: #8888ff;">
            ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ | AI Assistant ¬© 2025<br>
            üéØ –ñ–∞–º–±—ã–ª—Å–∫–∏–π –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤—ã—Å—à–∏–π –∫–æ–ª–ª–µ–¥–∂ | –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã
        </div>
        
        <div style="margin-top: 1.5rem; font-size: 0.8rem; color: #6666ff; display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem;">
            <div>üéØ –¢–æ—á–Ω–æ—Å—Ç—å: 94.2%</div>
            <div>‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: 12-15 –º–∏–Ω</div>
            <div>üéì –ü—Ä–æ—Ñ–µ—Å—Å–∏–π: 15+</div>
        </div>
    </div>
    """, unsafe_allow_html=True)
